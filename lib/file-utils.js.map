{"version":3,"file":"file-utils.js","sourceRoot":"","sources":["../src/file-utils.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,OAAO,aAAa;IACxB,YAAqB,GAAW;QAAX,QAAG,GAAH,GAAG,CAAQ;IAAG,CAAC;IACpC,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,OAAO,mBAAmB;IAC9B,YACW,GAAW,EACX,MAAc,EACd,WAAgB;QAFhB,QAAG,GAAH,GAAG,CAAQ;QACX,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAK;IACxB,CAAC;CACL;AAED;;GAEG;AACH,MAAM,UAAU,mBAAmB,CAAC,IAAU;IAC5C,OAAO,IAAI,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,0DAA0D;AAC1D,MAAM,UAAU,WAAW,CAAC,GAAW;IACrC,IAAI;QACF,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,KAAK,OAAO,CAAC;KAC1C;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,6BAA6B,CACjD,SAAiB;IAEjB,OAAO,IAAI,aAAa,CAAC,SAAS,CAAC,CAAC;AACtC,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAAC,QAAqB;IACtD,OAAO,mBAAmB,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,IAAU;IAClD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;IAC7C,MAAM,aAAa,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACtD,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QAC5C,CAAC,CAAC,aAAa,CAAC,SAAS,GAAG,OAAO;QACnC,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC;IAC5B,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,wDAAwD;AACxD,qBAAqB;AACrB,wBAAwB;AACxB,0BAA0B;AAC1B,IAAI;AAEJ,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,IAAU;IAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,GAAW;IAC9C,IAAI,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5B,IAAI,IAAI,CAAC,EAAE,EAAE;QACX,OAAO,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;KAC1B;;QAAM,OAAO,SAAS,CAAC;AAC1B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,GAAW;IAEX,IAAI,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5B,IAAI,IAAI,CAAC,EAAE,EAAE;QACX,OAAO,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;KAC1B;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["/**\r\n * Use this type when you need to store safe object URLs. And then when you need\r\n * the actual url, just access the .url member.\r\n */\r\nexport class SafeObjectUrl {\r\n  constructor(readonly url: string) {}\r\n  get unsafeUrl(): string {\r\n    return this.url;\r\n  }\r\n}\r\n\r\n/**\r\n * Use this type when you need to store safe object URLs. And then when you need\r\n * the actual url, just access the .url member.\r\n */\r\nexport class ZippedFileStructure {\r\n  constructor(\r\n    readonly src: string,\r\n    readonly skybox: string,\r\n    readonly annotations: any\r\n  ) {}\r\n}\r\n\r\n/**\r\n * Returns a SafeUrl, for google3-specific lit-html checks which require them.\r\n */\r\nexport function createSafeObjectURL(blob: Blob): SafeObjectUrl {\r\n  return new SafeObjectUrl(URL.createObjectURL(blob));\r\n}\r\n\r\n/** Returns true if the given raw URL is an object URL. */\r\nexport function isObjectUrl(url: string): boolean {\r\n  try {\r\n    return new URL(url).protocol === \"blob:\";\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Sanitizes an unsafe URI into a safe one, assuming it points to a supported\r\n * type (such as an image).\r\n */\r\nexport async function createSafeObjectUrlFromUnsafe(\r\n  unsafeUri: string\r\n): Promise<SafeObjectUrl> {\r\n  return new SafeObjectUrl(unsafeUri);\r\n}\r\n\r\n/**\r\n * This should only be used when you don't care what the blob type is. For\r\n * example, when loading GLBs directly via modelviewer.src.\r\n */\r\nexport function urlFromArrayBuffer(contents: ArrayBuffer) {\r\n  return createSafeObjectURL(new Blob([new Uint8Array(contents)]));\r\n}\r\n\r\nexport async function urlFromUnzippedFile(file: File) {\r\n  const arrayBuffer = await file.arrayBuffer();\r\n  const safeObjectUrl = urlFromArrayBuffer(arrayBuffer);\r\n  const unsafeUrl = file.name.match(/\\.(hdr)$/i)\r\n    ? safeObjectUrl.unsafeUrl + \"#.hdr\"\r\n    : safeObjectUrl.unsafeUrl;\r\n  return unsafeUrl;\r\n}\r\n\r\n// export async function urlFromZippedFile(file: File) {\r\n//   let src: string;\r\n//   let skybox: string;\r\n//   let annotations: any;\r\n// }\r\n\r\nexport async function jsonFromFile(file: File) {\r\n  return JSON.parse((await file.text()).toString());\r\n}\r\n\r\nexport async function getJsonFromUrl(url: string): Promise<any> {\r\n  let json = await fetch(url);\r\n  if (json.ok) {\r\n    return await json.json();\r\n  } else return undefined;\r\n}\r\n\r\nexport async function gettextFromFile(\r\n  url: string\r\n): Promise<string | undefined> {\r\n  let file = await fetch(url);\r\n  if (file.ok) {\r\n    return await file.text();\r\n  }\r\n  return undefined;\r\n}\r\n"]}